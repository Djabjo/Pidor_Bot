import logging
import json
import os
import random
import requests
import itertools
import time
from datetime import datetime
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
DEFAULT_CHAT_DATA = {
    "users": {},          # id: username
    "handsome_stats": {}, # id: count (–∫—Ä–∞—Å–∞–≤—á–∏–∫–∏)
    "pidor_stats": {},    # id: count (–ø–∏–¥–æ—Ä—ã)
    "last_handsome": {    # –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—Ä–∞—Å–∞–≤—á–∏–∫
        "user_id": None,
        "date": ""
    },
    "last_pidor": {       # –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–¥–æ—Ä
        "user_id": None,
        "date": ""
    }
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists('/db_user/users.json'):
        with open('/db_user/users.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open('/db_user/users.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
data = load_data()

def get_chat_data(chat_id):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ"""
    if str(chat_id) not in data:
        data[str(chat_id)] = DEFAULT_CHAT_DATA.copy()
        save_data(data)
    return data[str(chat_id)]


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands_list = [
        "/reg - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "/delete - —É–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "/run - –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "/pidor - –≤—ã–±—Ä–∞—Ç—å –ø–∏–¥–æ—Ä–∞ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "/pidorstats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–¥–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"
    ]
    await update.message.reply_text("üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ):\n\n" + "\n".join(commands_list))

# –ö–æ–º–∞–Ω–¥–∞ /reg
async def reg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    
    user_id = str(update.message.from_user.id)
    username = update.message.from_user.username
    full_name = f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()
    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å username –≤ Telegram!")
        return
        

    if user_id in chat_data["users"]:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message –≤–º–µ—Å—Ç–æ reply_text
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ÑπÔ∏è {full_name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∫–∞–∫ @{username}!"
        )
    else:
        chat_data["users"][user_id] = username 
        save_data(data)
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚úÖ {full_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ @{username}!"
        )


# –ö–æ–º–∞–Ω–¥–∞ /delete
async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    
    user_id = str(update.message.from_user.id)
    
    if user_id in chat_data["users"]:
        del chat_data["users"][user_id]
        if user_id in chat_data["handsome_stats"]:
            del chat_data["handsome_stats"][user_id]
        if user_id in chat_data["pidor_stats"]:
            del chat_data["pidor_stats"][user_id]
        save_data(data)
        await update.message.reply_text("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")
    else:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ!")

# –ö–æ–º–∞–Ω–¥–∞ /run
async def run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ï—Å–ª–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è
    if chat_data["last_handsome"].get("date") == today:
        handsome_user_id = chat_data["last_handsome"]["user_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ username –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞
        handsome_username = chat_data["users"].get(handsome_user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        handsome_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            if update.message.reply_to_message:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                handsome_name = update.message.reply_to_message.from_user.first_name
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                user = await context.bot.get_chat_member(chat_id, int(handsome_user_id))
                handsome_name = user.user.first_name
                handsome_surname = user.user.last_name
                handsome_full_name = f"{handsome_name} {handsome_surname or ''}".strip()
        except Exception:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚ÑπÔ∏è –ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è!\n"
            f"üë§ –ò–º—è: {handsome_full_name}\n"
            f"üëë Username: @{handsome_username}\n"
            f"üìÖ –î–∞—Ç–∞: {today}"
        )
        await update.message.reply_text(message)
        return
    users_list = list(chat_data["users"].keys())
    if not users_list:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
        return
        
    selected_id = random.choice(users_list)
    username = chat_data["users"][selected_id]
    full_name = f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chat_data["handsome_stats"][selected_id] = chat_data["handsome_stats"].get(selected_id, 0) + 1
    chat_data["last_handsome"] = {"user_id": selected_id, "date": today}
    save_data(data)


    await update.message.reply_text("–ö–†–£–¢–ò–ú –ë–ê–†–ê–ë–ê–ù")
    time.sleep(1)
    await update.message.reply_text("–ò—â–µ–º –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    time.sleep(1)
    await update.message.reply_text("4 - –ì–∞–¥–∞–µ–º –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö üìä")
    time.sleep(1)
    await update.message.reply_text("3 - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üåñ")
    time.sleep(1)
    await update.message.reply_text("2 - –õ—É–Ω–Ω–∞—è –ø—Ä–∏–∑–º–∞ –¥–∞–π –º–Ω–µ —Å–∏–ª—É üí´")
    time.sleep(1)
    await update.message.reply_text("1 - –°–ï–ö–¢–û–† –ü–†–ò–ó –ù–ê –ë–ê–†–ê–ë–ê–ù–ï üéØ")
    time.sleep(1)
    await update.message.reply_text(f"üéâ –°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è -  (@{username})")


# –ö–æ–º–∞–Ω–¥–∞ /pidor
async def pidor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    today = datetime.now().strftime("%Y-%m-%d")
    
    # –ï—Å–ª–∏ –ø–∏–¥–æ—Ä —É–∂–µ –≤—ã–±—Ä–∞–Ω —Å–µ–≥–æ–¥–Ω—è
    if chat_data["last_pidor"].get("date") == today:
        pidor_user_id = chat_data["last_pidor"]["user_id"]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ username –ø–∏–¥–æ—Ä–∞
        pidor_username = chat_data["users"].get(pidor_user_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        pidor_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        try:
            if update.message.reply_to_message:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                pidor_name = update.message.reply_to_message.from_user.first_name
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                user = await context.bot.get_chat_member(chat_id, int(pidor_user_id))
                pidor_name = user.user.first_name
                pidor_surname = user.user.last_name
                pidor_full_name = f"{pidor_name} {pidor_surname or ''}".strip()
        except Exception:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"‚ÑπÔ∏è –ü–∏–¥–æ—Ä –¥–Ω—è —É–∂–µ –≤—ã–±—Ä–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–µ–≥–æ–¥–Ω—è!\n"
            f"üë§ –ò–º—è: {pidor_full_name}\n"
            f"üîπ Username: @{pidor_username}\n"
            f"üìÖ –î–∞—Ç–∞: {today}"
        )
        await update.message.reply_text(message)
        return
    
    users_list = list(chat_data["users"].keys())
    if not users_list:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!")
        return
        
    selected_id = random.choice(users_list)
    username = chat_data["users"][selected_id]
    full_name = f"{update.message.from_user.first_name} {update.message.from_user.last_name or ''}".strip()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    chat_data["pidor_stats"][selected_id] = chat_data["pidor_stats"].get(selected_id, 0) + 1
    chat_data["last_pidor"] = {"user_id": selected_id, "date": today}
    save_data(data)
    await update.message.reply_text("–í–ù–ò–ú–ê–ù–ò–ï üî•")
    time.sleep(1)
    await update.message.reply_text("–§–ï–î–ï–†–ê–õ–¨–ù–´–ô üîç –†–û–ó–´–°–ö –ü–ò–î–û–†–ê üö®")
    time.sleep(1)
    await update.message.reply_text("4 - —Å–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω üöÄ")
    time.sleep(1)
    await update.message.reply_text("3 - —Å–≤–æ–¥–∫–∏ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã üöì")
    time.sleep(1)
    await update.message.reply_text("2 - —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –æ–ø—Ä–æ—à–µ–Ω—ã üôÖ")
    time.sleep(1)
    await update.message.reply_text("1 - —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω üôÄ")
    time.sleep(1)
    await update.message.reply_text(f"üéâ –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† üåà –¥–Ω—è - (@{username})!")

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    
    if not chat_data["handsome_stats"]:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤!")
        return
        
    stats_lines = []
    for user_id, count in chat_data["handsome_stats"].items():
        username = chat_data["users"].get(user_id, "unknown")
        stats_lines.append(f"üëë @{username}: {count} —Ä–∞–∑")
    
    stats_lines.sort(key=lambda x: int(x.split(": ")[1].split()[0]), reverse=True)
    
    message = "üèÜ –¢–æ–ø –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n" + "\n".join(stats_lines[:10])
    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ /pidorstats
async def pidorstats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat.id
    chat_data = get_chat_data(chat_id)
    
    if not chat_data["pidor_stats"]:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –µ—â–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏–¥–æ—Ä–æ–≤!")
        return
        
    stats_lines = []
    for user_id, count in chat_data["pidor_stats"].items():
        username = chat_data["users"].get(user_id, "unknown")
        stats_lines.append(f"üåà @{username}: {count} —Ä–∞–∑")
    
    stats_lines.sort(key=lambda x: int(x.split(": ")[1].split()[0]), reverse=True)
    
    message = "üÉè –¢–æ–ø –ø–∏–¥–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n" + "\n".join(stats_lines[:10])
    await update.message.reply_text(message)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_commands(application):
    commands = [
        BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand("reg", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ"),
        BotCommand("delete", "–£–¥–∞–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"),
        BotCommand("run", "–í—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ"),
        BotCommand("pidor", "–í—ã–±—Ä–∞—Ç—å –ø–∏–¥–æ—Ä–∞ –¥–Ω—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∞—Å–∞–≤—á–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞"),
        BotCommand("pidorstats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–¥–æ—Ä–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
    ]
    await application.bot.set_my_commands(commands)

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reg", reg))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(CommandHandler("run", run))
    app.add_handler(CommandHandler("pidor", pidor))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("pidorstats", pidorstats))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.post_init = set_commands
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()